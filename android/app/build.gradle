apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

import com.android.build.OutputFile

/**
 * Get the version code from command line param
 *
 * @return int If the param -PversionCode is present then return int value or 1
 */
def getVersionCode = { ->

    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1

    println "VersionCode is set to $code"

    return code
}

/**
 * Get the version name from command line param
 *
 * @return string If the param -PversionName is present then return string value or "0.1"
 */
def getVersionName = { ->

    def name = project.hasProperty('versionName') ? versionName.toString() : "0.1"

    println "VersionName is set to $name"

    return name
}


/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion rootProject.ext.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }
    lintOptions {
        abortOnError false
    }

    androidExtensions {
        experimental = true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    defaultConfig {
        applicationId "network.mysterium.vpn"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true
        ndk {
            debugSymbolLevel 'FULL'
            abiFilters "arm64-v8a", "armeabi-v7a", "armeabi", "x86", "x86_64"
        }

        buildConfigField "String", "BUGFENDER_KEY", "\"76DAzZtiLE5AYx7uvIWD8I16EqgReOHc\""
        buildConfigField "String", "NODE_VERSION", "\"1.11.1\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    flavorDimensions "default"
    productFlavors {
        playstore {
            dimension = "default"
            buildConfigField "String", "BUILD_VARIANT", "\"playstore\""
        }
        crypto {
            dimension = "default"
            buildConfigField "String", "BUILD_VARIANT", "\"crypto\""
        }
    }
    buildFeatures {
        dataBinding true
        buildFeatures.viewBinding = true
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //AndroidX
    implementation "androidx.fragment:fragment-ktx:1.3.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.work:work-runtime-ktx:2.5.0"

    //Google
    playstoreImplementation "com.google.android.play:core-ktx:1.8.1"
    implementation "com.google.android.material:material:1.3.0-alpha01"
    playstoreImplementation "com.android.billingclient:billing-ktx:4.0.0"

    //Koin
    implementation "io.insert-koin:koin-core:3.1.6"
    implementation "io.insert-koin:koin-android:3.1.6"

    //Coroutines
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.0'

    //Animation
    implementation "com.airbnb.android:lottie:3.6.1"

    //Glide
    implementation "com.github.bumptech.glide:glide:4.12.0"

    //Intercom
    implementation "io.intercom.android:intercom-sdk-base:9.1.0"

    //Room
    implementation "androidx.room:room-ktx:2.2.6"
    implementation "androidx.room:room-runtime:2.2.6"
    kapt "androidx.room:room-compiler:2.2.6"

    //Line chart
    implementation "com.github.PhilJay:MPAndroidChart:v3.1.0"

    //Pushy
    playstoreImplementation "me.pushy:sdk:1.0.86"

    //Rounded image
    implementation 'com.makeramen:roundedimageview:2.3.0'

    //Moshi
    implementation "com.squareup.moshi:moshi-kotlin:1.12.0"

    //QrCode
    cryptoImplementation 'com.journeyapps:zxing-android-embedded:4.1.0'

    //Markdown
    implementation "io.noties.markwon:core:4.6.2"

    //WorkManager
    implementation "androidx.work:work-runtime-ktx:2.6.0"

    //Mysterium
    // Change NODE_VERSION in defaultConfig if updating version of mobile-node
    implementation "network.mysterium:terms:0.0.50"
    implementation "network.mysterium:mobile-node:1.11.1"
    
    testImplementation 'junit:junit:4.12'
    androidTestImplementation(
            'androidx.test:core:1.2.0',
            'androidx.test.ext:junit:1.1.1',
            'androidx.test:runner:1.2.0',
            'androidx.test.espresso:espresso-core:3.2.0',
            'androidx.test.espresso:espresso-contrib:3.2.0',
            'androidx.test:rules:1.3.0-rc01',
    )
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

repositories {
    mavenCentral()
}
